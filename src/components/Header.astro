---
import ThemeIcon from "@/components/ThemeIcon.astro";
import CodeBracketIcon from "@/icons/codeBracket.astro";

const navItems = [
	{
		title: "Experiencia",
		label: "experiencia",
		url: "/#experiencia",
	},
	{
		title: "Proyectos",
		label: "proyectos",
		url: "/#proyectos",
	},
	{
		title: "Sobre m√≠",
		label: "sobre-mi",
		url: "/#sobre-mi",
	},
	{
		title: "Blog",
		label: "blog",
		url: "/blog",
	},
];
---

<header class="flex h-16 justify-center items-center">
	<nav
		aria-hidden="true"
		class="flex max-w-xl justify-center items-center fixed z-10 rounded-full lg:px-4 px-1"
	>
		<a
			href="/"
			aria-hidden="true"
			class="hidden lg:flex items-center font-bold text-lg text-indigo-500 dark:text-white gap-x-1"
		>
			<CodeBracketIcon />
			kaisher
		</a>
		{
			navItems.map((link) => (
				<a
					aria-label={link.label}
					href={link.url}
					class="dark:text-white text-gray-500/80 transition block text-center font-medium lg:p-2 p-1 hover:text-green-400 dark:hover:text-green-400"
				>
					{link.title}
				</a>
			))
		}
		<ThemeIcon />
	</nav>
</header>
<script>
  document.addEventListener("astro:page-load", () => {
    const sections = document.querySelectorAll("section")
    const navItems = document.querySelectorAll("header nav a")

    const callback = (entries: any[]) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          navItems.forEach((item) => {
            if (item.getAttribute("aria-label") == entry.target.id) {
              item.classList.add("text-green-300")
            } else {
              item.classList.remove("text-green-300")
            }
          })
        }
      })
    }

    const observer = new IntersectionObserver(callback, {
      root: null,
      rootMargin: "0px",
      threshold: 0.3,
    })

    sections.forEach((section) => {
      observer.observe(section)
    })

    // Cleanup function
    document.onvisibilitychange = () => {
      if (document.visibilityState === "hidden") {
        observer.disconnect()
      } else {
        sections.forEach((section) => {
          observer.observe(section)
        })
      }
    }
  })
</script>
<style>
	nav {
		animation: nav-shadown 1s linear both;
		animation-timeline: scroll();
		animation-range: 0 100px;
	}
	@keyframes nav-shadown {
		to {
			@apply shadow-lg ring-1 backdrop-blur dark:bg-gray-800/90 bg-white/50 ring-white/10;
		}
	}
</style>
